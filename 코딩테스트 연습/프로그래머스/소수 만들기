주어진 숫자 중 3개의 수를 더했을 때 소수가 되는 경우의 개수를 구하려고 합니다.
숫자들이 들어있는 배열 nums가 매개변수로 주어질 때,
nums에 있는 숫자들 중 서로 다른 3개를 골라 더했을 때 소수가 되는 경우의 개수를 return 하도록 solution 함수를 완성해주세요.

조합을 이용해서 중복되지않게 뽑은 후 소수 체크




func solution(_ nums:[Int]) -> Int {
    var answer = 0
    
    func checkNum(num: Int) -> Bool{
        var result = true
        for i in 2..<num {
            if num%i == 0 {
                result = false
            }
        }
        return result
    }
    
    func combine(total: [Int], shouldSelect: Int, current index: Int, selected: [Int]) {
        if shouldSelect == 0 {
            var result = 0
            for i in selected {
                result += i
            }
            if checkNum(num: result) {
                answer += 1
            }
        } else if index == total.count {
            return
        } else {
            var newSelected = selected
            newSelected.append(total[index])
            combine(total: total, shouldSelect: shouldSelect-1, current: index+1, selected: newSelected)
            combine(total: total, shouldSelect: shouldSelect, current: index+1, selected: selected)
        }
    }
    
    combine(total: nums, shouldSelect: 3, current: 0, selected: [])

    return answer
}
