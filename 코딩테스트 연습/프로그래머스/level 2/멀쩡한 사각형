가로 길이가 Wcm, 세로 길이가 Hcm인 직사각형 종이가 있습니다.
종이에는 가로, 세로 방향과 평행하게 격자 형태로 선이 그어져 있으며, 모든 격자칸은 1cm x 1cm 크기입니다.
이 종이를 격자 선을 따라 1cm × 1cm의 정사각형으로 잘라 사용할 예정이었는데, 누군가가 이 종이를 대각선 꼭지점 2개를 잇는 방향으로 잘라 놓았습니다.
그러므로 현재 직사각형 종이는 크기가 같은 직각삼각형 2개로 나누어진 상태입니다.
새로운 종이를 구할 수 없는 상태이기 때문에, 이 종이에서 원래 종이의 가로, 세로 방향과 평행하게 1cm × 1cm로 잘라 사용할 수 있는 만큼만 사용하기로 하였습니다.
가로의 길이 W와 세로의 길이 H가 주어질 때, 사용할 수 있는 정사각형의 개수를 구하는 solution 함수를 완성해 주세요.

// 직사각형을 대각선을 연결하여 정확히 반으로 갈랐을때, 사용 가능한 정사각형의 개수를 구하는데 있어서 규칙을 먼저 구했다.
// 직사각형이 점점 커지고 예제의 그림을 보며 2 * 3 직사각형 안에 4개의 사각형이 있는것이 규칙적으로 보여 맨땅에 헤딩식으로 일일히 구하는게 아니라 규칙이 있음을 발견했다.
// 직사각형을 반으로 자를때, 직사각형의 가로와 세로를 더하고 최대공약수를 뺀 값을 전체 수 에서 빼면 사용가능한 정사각형의 수가 나오는것을 발견했다.



import Foundation

func solution(_ w:Int, _ h:Int) -> Int64{
    var answer:Int64 = 0
    var weight = w
    var height = h
    var wArr = [Int]()
    var hArr = [Int]()
    var num = 1
    var result = w + h
    
    for i in 1...height{
        if w % i == 0 {
            wArr.append(i)
        }
    }
    for i in 1...weight{
        if h % i == 0 {
            hArr.append(i)
        }
    }
    if let num = wArr.filter{ hArr.contains($0)}.max() {
        result = result - num
    }
    answer = Int64(w * h - result)
    return answer
}
